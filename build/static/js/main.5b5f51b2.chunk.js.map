{"version":3,"sources":["TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.js","server.ts","serviceWorker.js","index.js"],"names":["TextInput","state","value","props","focus","this","canChangeFromOutside","setState","attrs","autofocus","autoFocus","onEnter","onKeyDown","e","keyCode","className","type","onChange","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","href","onClick","preventDefault","src","width","proxy","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","conversation","lastMessages","length","selected","onSelect","name","Date","timeStamp","toDateString","content","addEventListener","cid","m","channelId","forceUpdate","removeAllEventListener","LeftPane","inbox","user","tag","text","sendContactRequest","conversations","map","x","key","selectedConversation","firstMessage","c","MessageCard","own","message","toLocaleTimeString","PureComponent","RightPane","console","log","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","ws","WebSocket","p","JSON","parse","data","alert","dispatch","find","push","packet","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5b5f51b2.chunk.js","sourcesContent":["import React,{ Component } from \"react\";\nimport './TextInput.css';\n\nexport interface TextInputOptions {\n    value?: string;\n    onChange?: (value: string) => void; type?: \"text\" | \"password\" | \"email\"; placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n    canChangeFromOutside?:boolean;\n};\n\nexport class TextInput extends Component<TextInputOptions> {\n    state = { value: this.props.value, focus: false }\n    render() {\n        if(this.props.value !=this.state.value && this.props.canChangeFromOutside){\n            this.setState({ value: this.props.value });\n            //not the perfect solution, but if the value changes outside of the component it will not refresh the state\n            //this was my easiest workaround\n        }\n        let attrs = {} as any;\n        if (this.props.autofocus) attrs.autoFocus = true;\n        if (this.props.onEnter) attrs.onKeyDown = e => {\n            if (e.keyCode === 13) this.props.onEnter!();\n        };\n        return (\n            <div className=\"text-input\">\n                <input {...attrs} type={this.props.type ?? \"text\"} value={this.state.value} onChange={e => {\n                    this.setState({ value: e.target.value });\n                    this.props.onChange?.(e.target.value);\n                }}\n                    onBlur={() => this.setState({ focus: false })}\n                    onFocus={() => this.setState({ focus: true })} />\n                <div className=\"focus-indicator\"></div>\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\n                    {this.props.placeholder} </label>\n            </div>);\n    }\n}","import React, { Component } from 'react';\nimport { Proxy } from './server';\nimport { TextInput } from './TextInput'\nimport { proxy } from './App';\nimport './Login.css';\n\nexport class Login extends Component {\n    state: MyState = { email: \"\", password: \"\", displayName: \"\", register: false };\n    //proxy:Proxy = this.props.proxy;\n    render() {\n        return (\n            <div className=\"login\">\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"} <a href=\"\" onClick={e => {\n                    e.preventDefault();\n                    this.setState((e:any) => ({ register: !(e.register) })); // pass a function instead of object would not build because of \n                }}>\n                    {this.state.register ? \"Login\" : \"Register\"} </a>\n                </p>\n                <img src=\"logo512.png\" width=\"256\" />\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email} onChange={(e) => {\n                    if (e === 'qwerty' || e === 'd20e4f' || e === 'D20E4F') {\n                        this.setState({ displayName: 'Dávid', email: e });\n                    } else {\n                        this.setState({ email: e });\n                    }\n                }} autofocus={true} onEnter={() => this.onClick()} />\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={(e) => this.setState({ password: e })} onEnter={() => this.onClick()} />\n                {this.state.register &&\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\n                        onChange={e => this.setState({ displayName: e })} onEnter={() => this.onClick()} canChangeFromOutside={true}/>}\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.state.register ? \"Register\" : \"Login\"}\n                </button>\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n            </div>);\n    }\n    onClick() {\n        if (this.state.register)\n            proxy.sendPacket({\n                type: \"register\", email: this.state.email, password: this.state.password,\n                displayName: this.state.displayName, staySignedIn: false\n            }); else\n            proxy.sendPacket({ type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false });\n    }\n}\ninterface MyState {\n    email: string\n    password: string\n    displayName: string\n    register: boolean\n}","import React, { Component } from \"react\";\nimport { TextInputOptions, TextInput } from \"./TextInput\";\n\nexport interface TextInputAndButtonOptions extends TextInputOptions {\n    buttonContent?: string;\n    onClick?: (text: string) => boolean | void;\n}\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions> {\n    textInput = React.createRef<TextInput>()\n    onClick() {\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\")) this.textInput.current?.setState({ value: \"\" });\n    }\n    render() {\n        return (\n            <div className=\"text-input-and-button\">\n                <TextInput {...this.props} onEnter={() => this.onClick()} ref={this.textInput} />\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.props.buttonContent} </button>\n            </div>\n        );\n    }\n}","\nimport React, { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./App\";\nexport class ConversationCard extends Component<{\n    conversation: ConversationDto,\n    selected: boolean,\n    onSelect: () => void\n}> {\n    render() {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ? this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\n        return (\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\n                onClick={() => this.props.onSelect()}> <div className=\"row\">\n                    <span className=\"channel-name\">{this.props.conversation.name}</span> <span className=\"time\">\n                        {lastMessage && new Date(lastMessage.timeStamp).toDateString()} </span>\n                </div>\n                <span className=\"last-message\">{lastMessage?.content}</span> </div>\n        );\n    }\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation.channelId) this.forceUpdate();\n        }, this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n}","import React, { Component } from \"react\";\nimport { InboxDto, ConversationDto } from \"./chat\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { ConversationCard } from \"./ConversationCard\";\nimport { proxy } from \"./App\";\n\nexport class LeftPane extends Component<{\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined, onSelect: (c: ConversationDto) => void\n}> {\n    render() {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p> <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={text => this.sendContactRequest(text)} /> <div className=\"conversations\">\n                    {this.props.inbox.conversations.map(x => <ConversationCard\n                        key={x.channelId}\n                        conversation={x}\n                        selected={x === this.props.selectedConversation} onSelect={() => this.props.onSelect(x)} />)}\n                </div> </div>\n        );\n    }\n    sendContactRequest(email: string) {\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\n        return true;\n    }\n    componentDidMount() {\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n}","import React, { PureComponent } from \"react\";\nimport { MessageDto } from \"./chat\";\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }> {\n    render() {\n        return (\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\n                <div className=\"bubble\">\n                    <span className=\"text\">{this.props.message.content}</span> <span className=\"time\">\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()} </span>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { MessageCard } from \"./MessageCard\";\nimport { proxy } from \"./App\";\nimport { ConversationDto } from \"./chat\";\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }> {\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation?.channelId) this.forceUpdate();\n        }, this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n    onSend(text: string) {\n        console.log(text);\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: `D: ${text}` });\n        return true;\n    }\n    render() {\n        return (\n            <div className=\"right-pane column\">\n                {this.props.conversation && <>\n                    <div className=\"conversation-header\"> <button type=\"button\" className=\"only-narrow\"\n                        onClick={() => this.props.onBack()}>Back</button> <p>{this.props.conversation?.name}</p>\n                    </div>\n                    <div className=\"messages\">\n                        {this.props.conversation?.lastMessages.map(x => <MessageCard key={x.id} message={x}\n                            own={x.senderId === proxy.inbox?.user.id} />)} </div>\n                    <div className=\"send-message row\">\n                        <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                            buttonContent=\"Send\" onClick={x => this.onSend(x)} />\n                    </div>\n                </>\n                }\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { LeftPane } from \"./LeftPane\";\nimport { RightPane } from \"./RightPane\";\nimport { proxy } from \"./App\";\nexport class Main extends Component {\n    state = { selectedConversation: undefined as (ConversationDto | undefined) }; render() {\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\n        return (\n            <div className={className}>\n                <LeftPane\n                    inbox={proxy.inbox!}\n                    selectedConversation={this.state.selectedConversation} onSelect={c => this.setState({ selectedConversation: c })} />\n                <RightPane conversation={this.state.selectedConversation} onBack={() => this.setState({ selectedConversation: undefined })} />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Login } from './Login.tsx'\nimport { Main } from './Main.tsx'\nimport { Proxy } from './server.ts'\n\n\nexport var proxy = new Proxy();\nexport default class App extends Component {\n  state = { showLogin: true };\n  componentDidMount() {\n    proxy.addEventListener(\"login\", () => this.setState({ showLogin: false }));\n  }\n  //proxy = new Proxy();\n  render() {\n    proxy.addEventListener(\"login\", () => {\n      console.log(\"log in received\")\n    });\n    return (\n      <div className=\"app\">\n        { this.state.showLogin ? <Login /> : <Main /> }\n      </div>\n    );\n  }\n}","import { OutgoingPacket, InboxDto, IncomingPacket, MessageDto } from \"./chat\";\n\nclass EventProducer<M> {\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\n        this.listeners.push({ type, listener, obj });\n    }\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\n    }\n    protected dispatch<K extends keyof M>(type: K, ...args) {\n        for (let listener of this.listeners.filter(x => x.type === type)) listener.listener.call(listener.obj, ...args);\n    }\n    removeAllEventListener(obj: Object) {\n        if (!obj)\n            throw new Error(\"Must specify object\");\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\n    }\n}\n\nexport class Proxy extends EventProducer<ProxyEventMap>{\n    private ws: WebSocket;\n    inbox: InboxDto | null = null;\n    constructor() {\n        super();\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\"); this.ws.addEventListener(\"open\", () => {\n        //const packet: OutgoingPacket = { type: \"register\", email: 'TRDMYUSER', password: 'secretpassword', displayName: 'iamironman', staySignedIn: false };\n        //this.sendPacket(packet);\n        });\n        this.ws.addEventListener(\"message\", e => {\n            let p = <IncomingPacket>JSON.parse(e.data); switch (p.type) {\n                case \"error\":\n                    alert(p.message); break;\n                case \"login\":\n                    this.inbox = p.inbox; \n                    this.dispatch( \"login\" );\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\n                    this.dispatch( \"message\", cid, p.message);\n                    break;\n                case \"conversationAdded\": \n                    this.inbox!.conversations.push(p.conversation);\n                    this.dispatch(\"conversation\", p.conversation.channelId); \n                    break;\n            }\n        });\n    }\n    sendPacket(packet: OutgoingPacket) {\n        //console.log(packet);\n        this.ws.send(JSON.stringify(packet));\n    }\n}\ninterface ProxyEventMap {\n    \"login\": () => void;\n    \"message\": (channelId: string, message: MessageDto) => void;\n     \"conversation\": (channelId: string) => void;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}